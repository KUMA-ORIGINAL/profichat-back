
services:
  backend:
    build:
      context: app
      dockerfile: Dockerfile.prod
    env_file:
      - .env.prod
    restart: always
    expose:
      - 8000
    volumes:
      - ./app:/app
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - mynet


  database:
    image: postgres:16
    env_file: .env.prod
    restart: unless-stopped
    volumes:
      - database-storage:/var/lib/postgresql/data
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}' ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - mynet


  redis:
    image: redis
    restart: always
    ports:
      - '127.0.0.1:6379:6379'
    volumes:
      - redis-data:/data
    command: redis-server --replicaof no one --maxmemory-policy noeviction
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    networks:
      - mynet


  nginx:
    build: nginx
    env_file: .env.prod
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - static_volume:/app/static
      - media_volume:/app/media
      - certs:/etc/letsencrypt
    depends_on:
      - backend
    networks:
      - mynet

volumes:
  database-storage:
  redis-data:
  static_volume:
  media_volume:
  certs:

networks:
  mynet:
    external: true